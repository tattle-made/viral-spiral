<div id="multiplayer-room-container" phx-hook="HookMultiplayerRoom" class="relative">
  <div class="w-full">
    <Atoms.background id="container-bg" image={bg_image(get_in(@state.room.chaos))} />
  </div>

  <div class="relative w-full min-h-[calc(100vh-56px)] flex flex-col">
    <div :if={@state && @state.room} class="p-2 flex flex-row mb mt ">
      <div class="flex flex-col gap-1">
        <p class="bg-fuchsia-950 p-2 rounded-xl text-fuchsia-100">
          <%= @state.room.name %>
        </p>
        <%= if @state.current_holder_name do %>
          <p class="bg-[#728645] p-4 rounded-2xl text-fuchsia-100 text-lg font-medium shadow-md">
            <%= @state.current_holder_name %>
          </p>
        <% end %>
      </div>

      <div class="flex-1"></div>
      <div class="shrink-0 flex flex-row gap-2">
        <.popover id="popover-info">
          <:title>Reasons for last changes</:title>
          <:content>
            <div :if={@change_list}>
              <div :for={message <- @change_list}>
                <div><%= message %></div>
              </div>
            </div>
          </:content>
        </.popover>
        <p class="bg-fuchsia-950 p-2 rounded-lg text-fuchsia-100 self-start">
          <%= 10 - @state.room.chaos %>
        </p>
      </div>
    </div>

    <div :if={@state && @state.others} id="container-others">
      <.carousel_score_card players={@state.others} />
    </div>

    <div
      :if={@state && @state.current_cards}
      id="container-cards"
      class="flex-1 mt-2 flex justify-center"
    >
      <div :for={card <- @state.current_cards}>
        <.card
          card={card}
          from={@state.me.id}
          can_turn_fake={@state.power_turn_fake.enabled}
          can_use_power={@state.can_use_power}
        />
      </div>
    </div>

    <div class="container-powers mb-2 flex justify-center">
      <div
        :if={@state && @state.can_use_power && @state.power_cancel.can_cancel}
        phx-click={show_modal("cancel-initiate-modal")}
      >
        <button class="py-1 px-2 bg-violet-300 hover:bg-violet-950 text-slate-800 hover:text-slate-50 text-xs rounded-md border border-zinc-900 self-center">
          Cancel Player
        </button>
        <.modal id="cancel-initiate-modal" class="justify-center">
          <div>
            <.header class="text-center">
              Let's cancel someone!
              <:subtitle>This will make them skip their next turn.</:subtitle>
            </.header>
            <.simple_form for={@state.power_cancel.form.data} phx-submit="initiate_cancel">
              <.input
                type="select"
                field={@state.power_cancel.form.data[:target_id]}
                label="Select player to cancel"
                options={@state.power_cancel.form.values.targets.options}
                value={@state.power_cancel.form.values.targets.value}
                prompt="Choose a player"
              />

              <.input
                type="select"
                field={@state.power_cancel.form.data[:affinity]}
                options={@state.power_cancel.form.values.affinity.options}
                value={@state.power_cancel.form.values.affinity.value}
                prompt="Choose a community"
                label="Select community to mobilize"
              />

              <.input type="hidden" name="from_id" value={@state.me.id} />
              <:actions>
                <.button>Cancel Player</.button>
              </:actions>
            </.simple_form>
          </div>
        </.modal>
      </div>

      <div :if={@state && @state.power_cancel.can_vote}>
        <.modal id="cancel-vote-modal" show={true}>
          <.header class="text-center mb-6">
            <span class="text-slate-600 underline font-bold">
              <%= @state.power_cancel.from_player.name %>
            </span>
            <span>wants to cancel</span>
            <span class="text-slate-600 underline font-bold">
              <%= @state.power_cancel.target_player.name %>
            </span>
            <:subtitle>This will make them skip their next turn.</:subtitle>
          </.header>
          <div class="flex justify-center space-x-3">
            <button
              phx-click={JS.push("cancel_vote", value: %{vote: true, from_id: @state.me.id})}
              class=" py-1 px-2 bg-[#015058] hover:bg-[#21802B] text-white rounded"
            >
              <%!-- Yes --%>
              <.icon name="hero-hand-thumb-up-solid" class="h-5 w-5" />
            </button>

            <button
              phx-click={JS.push("cancel_vote", value: %{vote: false, from_id: @state.me.id})}
              class=" py-1 px-2 bg-[#015058] hover:bg-[#21802B] text-white rounded"
            >
              <%!-- No --%>
              <.icon name="hero-hand-thumb-down-solid" class="h-5 w-5" />
            </button>
          </div>
        </.modal>
      </div>

      <div :if={@state && @state.can_use_power && @state.power_viral_spiral.enabled}>
        <button
          class="py-1 px-2 bg-violet-300 hover:bg-violet-950 text-slate-800 hover:text-slate-50 text-xs rounded-md border border-zinc-900 self-center"
          phx-click={
            if @state && @state.hand && Enum.count(@state.hand) > 0,
              do: show_modal("viral-spiral-hand-modal"),
              else: show_modal("no-cards-modal")
          }
        >
          Enable Viral Spiral Power
        </button>
        <.modal id="viral-spiral-hand-modal" class="flex justify-center">
          <div class="flex flex-col items-center text-center gap-4">
            <%= if @state && @state.hand && Enum.count(@state.hand) > 0 do %>
              <h3 class="text-textcolor-light text-lg font-medium mb-2">
                Select a card to use Viral Spiral Power
              </h3>
              <div class="flex flex-row gap-2 overflow-x-auto">
                <div :for={card <- @state.hand} class="p-1 w-24 h-auto shrink-0">
                  <button phx-click={
                    JS.push("initiate_viral_spiral",
                      value: %{
                        from_id: @state.me.id,
                        card: %{id: card.id, veracity: card.veracity},
                        to_id: @state.others |> Enum.map(&Map.get(&1, :id))
                      }
                    )
                    |> hide_modal("viral-spiral-hand-modal")
                  }>
                    <.hand_card card={card} />
                  </button>
                </div>
              </div>
            <% end %>
          </div>
        </.modal>
        <.modal id="no-cards-modal" class="flex justify-center">
          <h3 class="text-textcolor-light text-lg font-medium mb-2 text-center">
            There are no cards in hand
          </h3>
        </.modal>
      </div>
    </div>

    <div class="flex flex-wrap mx-auto gap-2 mb-4 justify-center">
      <div :if={@state && @state.me} id="container-me" class=" flex justify-center">
        <.player_score_card player={@state.me} />
      </div>
      <div
        :if={@state && @state.hand}
        id="container-hand"
        class="h-fit border border-px-2 rounded-md p-2 bg-slate-200 max-w-full "
      >
        <div class="flex flex-row gap-1 overflow-x-auto flex-nowrap w-full max-w-full">
          <div :for={card <- @state.hand} class="p-1 w-8 h-auto shrink-0">
            <button phx-click={show_modal("hand-card-modal-#{card.id}")}>
              <.hand_card card={card} />
            </button>
            <.modal id={"hand-card-modal-#{card.id}"} class="flex justify-center">
              <div :if={card != nil} class="self-center">
                <.card_preview card={card} />
              </div>
            </.modal>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
